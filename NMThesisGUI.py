# Form implementation generated from reading ui file 'NMThesisGUI.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1045, 746)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.RMButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.RMButton.setGeometry(QtCore.QRect(340, 220, 121, 32))
        self.RMButton.setObjectName("RMButton")

        self.AFButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.AFButton.setGeometry(QtCore.QRect(540, 220, 121, 32))
        self.AFButton.setObjectName("AFButton")

        #  self.CloseButton = QtWidgets.QPushButton(parent=self.centralwidget)
      #  self.CloseButton.setGeometry(QtCore.QRect(390, 320, 121, 32))
      #  self.CloseButton.setObjectName("CloseButton")

        self.shuffleStatusLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.shuffleStatusLabel.setGeometry(QtCore.QRect(340, 200, 131, 16))
        self.shuffleStatusLabel.setObjectName("shuffleStatusLabel")
        self.shuffleStatusLabel.setStyleSheet("color: orange;")
        self.shuffleStatusLabel.setHidden(True)

        self.foldingStatusLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.foldingStatusLabel.setGeometry(QtCore.QRect(550, 200, 131, 16))
        self.foldingStatusLabel.setObjectName("foldingStatusLabel")
        self.foldingStatusLabel.setStyleSheet("color: orange;")
        self.foldingStatusLabel.setHidden(True)

        self.errorMessageLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.errorMessageLabel.setGeometry(QtCore.QRect(330, 310, 341, 20))
        self.errorMessageLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.errorMessageLabel.setObjectName("errorMessageLabel")
        self.errorMessageLabel.setStyleSheet("color: red;")
        self.errorMessageLabel.setHidden(True)

        ####################################################

        self.RMInputLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.RMInputLabel.setGeometry(QtCore.QRect(70, 20, 111, 16))
        self.RMInputLabel.setObjectName("RMInputLabel")

        self.RMInputOne = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.RMInputOne.setGeometry(QtCore.QRect(60, 40, 171, 20))
        self.RMInputOne.setChecked(True)
        self.RMInputOne.setAutoExclusive(False)
        self.RMInputOne.setObjectName("RMInputOne")

        self.RMInputTwo = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.RMInputTwo.setGeometry(QtCore.QRect(60, 70, 21, 20))
        self.RMInputTwo.setText("")
        self.RMInputTwo.setAutoExclusive(False)
        self.RMInputTwo.setObjectName("RMInputTwo")

        self.RMInputEntryOne = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.RMInputEntryOne.setGeometry(QtCore.QRect(220, 40, 113, 21))
        self.RMInputEntryOne.setText("/")
        self.RMInputEntryOne.setObjectName("RMInputEntryOne")

        self.RMInputEntryTwo = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.RMInputEntryTwo.setGeometry(QtCore.QRect(80, 70, 113, 21))
        self.RMInputEntryTwo.setText("")
        self.RMInputEntryTwo.setObjectName("RMInputEntryTwo")

        self.RMInputFilesLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.RMInputFilesLabel.setGeometry(QtCore.QRect(30, 100, 111, 16))
        self.RMInputFilesLabel.setObjectName("RMInputFilesLabel")

        self.RMInputFilesOne = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.RMInputFilesOne.setEnabled(True)
        self.RMInputFilesOne.setGeometry(QtCore.QRect(20, 120, 99, 20))
        self.RMInputFilesOne.setChecked(True)
        self.RMInputFilesOne.setAutoExclusive(False)
        self.RMInputFilesOne.setObjectName("RMInputFilesOne")

        self.RMInputFilesTwo = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.RMInputFilesTwo.setGeometry(QtCore.QRect(130, 120, 251, 20))
        self.RMInputFilesTwo.setAutoExclusive(False)
        self.RMInputFilesTwo.setObjectName("RMInputFilesTwo")

        self.RMFileList = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.RMFileList.setGeometry(QtCore.QRect(30, 150, 241, 21))
        self.RMFileList.setObjectName("RMFileList")

        self.WindowLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.WindowLabel.setGeometry(QtCore.QRect(20, 310, 141, 16))
        self.WindowLabel.setObjectName("WindowLabel")

        self.WindowInput = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.WindowInput.setGeometry(QtCore.QRect(20, 330, 113, 21))
        self.WindowInput.setObjectName("WindowInput")

        self.PerAlignLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.PerAlignLabel.setGeometry(QtCore.QRect(20, 360, 141, 16))
        self.PerAlignLabel.setObjectName("PerAlignLabel")

        self.PerAlignInput = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.PerAlignInput.setGeometry(QtCore.QRect(20, 380, 113, 21))
        self.PerAlignInput.setObjectName("PerAlignInput")

        self.InDelCheck = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.InDelCheck.setGeometry(QtCore.QRect(170, 390, 211, 20))
        self.InDelCheck.setObjectName("InDelCheck")


        #  self.TranslateLabel = QtWidgets.QLabel(parent=self.centralwidget)
      #  self.TranslateLabel.setGeometry(QtCore.QRect(30, 400, 181, 31))
      #  self.TranslateLabel.setWordWrap(True)
      #  self.TranslateLabel.setObjectName("TranslateLabel")

        self.DNAButtonOne = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.DNAButtonOne.setEnabled(True)
        self.DNAButtonOne.setGeometry(QtCore.QRect(170, 280, 99, 20))
        self.DNAButtonOne.setChecked(True)
        self.DNAButtonOne.setAutoExclusive(False)
        self.DNAButtonOne.setObjectName("DNAButtonOne")

        self.DNAButtonTwo = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.DNAButtonTwo.setEnabled(True)
        self.DNAButtonTwo.setGeometry(QtCore.QRect(170, 310, 99, 20))
        self.DNAButtonTwo.setAutoExclusive(False)
        self.DNAButtonTwo.setObjectName("DNAButtonTwo")

        self.ProtButton = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.ProtButton.setGeometry(QtCore.QRect(170, 340, 99, 20))
        self.ProtButton.setAutoExclusive(False)
        self.ProtButton.setObjectName("ProtButton")

        self.AlnInputOne = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.AlnInputOne.setEnabled(True)
        self.AlnInputOne.setGeometry(QtCore.QRect(40, 450, 191, 20))
        self.AlnInputOne.setChecked(True)
        self.AlnInputOne.setAutoExclusive(False)
        self.AlnInputOne.setObjectName("AlnInputOne")

        self.AlnInputTwo = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.AlnInputTwo.setGeometry(QtCore.QRect(40, 480, 201, 20))
        self.AlnInputTwo.setAutoExclusive(False)
        self.AlnInputTwo.setObjectName("AlnInputTwo")

        self.AlnEntryOne = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.AlnEntryOne.setGeometry(QtCore.QRect(50, 500, 113, 21))
        self.AlnEntryOne.setObjectName("AlnEntryOne")
        
        self.AlnEntryTwo = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.AlnEntryTwo.setGeometry(QtCore.QRect(50, 530, 113, 21))
        self.AlnEntryTwo.setObjectName("AlnEntryTwo")

        self.RMOutputLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.RMOutputLabel.setGeometry(QtCore.QRect(40, 200, 121, 16))
        self.RMOutputLabel.setObjectName("RMOutputLabel")

        self.RMOutputOne = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.RMOutputOne.setGeometry(QtCore.QRect(20, 220, 171, 20))
        self.RMOutputOne.setChecked(True)
        self.RMOutputOne.setAutoExclusive(False)
        self.RMOutputOne.setObjectName("RMOutputOne")

        self.RMOutputTwo = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.RMOutputTwo.setGeometry(QtCore.QRect(20, 240, 21, 20))
        self.RMOutputTwo.setText("")
        self.RMOutputTwo.setAutoExclusive(False)
        self.RMOutputTwo.setObjectName("RMOutputTwo")

        self.RMOutputEntryOne = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.RMOutputEntryOne.setGeometry(QtCore.QRect(180, 220, 113, 21))
        self.RMOutputEntryOne.setText("/")
        self.RMOutputEntryOne.setObjectName("RMOutputEntryOne")

        self.RMOutputEntryTwo = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.RMOutputEntryTwo.setGeometry(QtCore.QRect(40, 240, 113, 21))
        self.RMOutputEntryTwo.setText("")
        self.RMOutputEntryTwo.setObjectName("RMOutputEntryTwo")

    ##########################################################


        self.AFInputLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.AFInputLabel.setGeometry(QtCore.QRect(750, 20, 111, 16))
        self.AFInputLabel.setObjectName("AFInputLabel")

        self.AFInputOne = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.AFInputOne.setGeometry(QtCore.QRect(720, 40, 171, 20))
        self.AFInputOne.setCheckable(True)
        self.AFInputOne.setChecked(True)
        self.AFInputOne.setAutoExclusive(False)
        self.AFInputOne.setObjectName("AFInputOne")

        self.AFInputTwo = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.AFInputTwo.setGeometry(QtCore.QRect(720, 70, 171, 20))
        self.AFInputTwo.setAutoExclusive(False)
        self.AFInputTwo.setObjectName("AFInputTwo")

        self.AFInputThree = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.AFInputThree.setGeometry(QtCore.QRect(720, 100, 21, 20))
        self.AFInputThree.setText("")
        self.AFInputThree.setAutoExclusive(False)
        self.AFInputThree.setObjectName("AFInputThree")

        self.AFInputEntryOne = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.AFInputEntryOne.setGeometry(QtCore.QRect(880, 40, 113, 21))
        self.AFInputEntryOne.setText("/")
        self.AFInputEntryOne.setObjectName("AFInputEntryOne")

        self.AFInputEntryTwo = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.AFInputEntryTwo.setGeometry(QtCore.QRect(740, 100, 113, 21))
        self.AFInputEntryTwo.setText("")
        self.AFInputEntryTwo.setObjectName("AFInputEntryTwo")

        self.AFInputFilesLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.AFInputFilesLabel.setGeometry(QtCore.QRect(730, 130, 111, 16))
        self.AFInputFilesLabel.setObjectName("AFInputFilesLabel")

        self.AFInputFilesOne = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.AFInputFilesOne.setEnabled(True)
        self.AFInputFilesOne.setGeometry(QtCore.QRect(730, 150, 99, 20))
        self.AFInputFilesOne.setChecked(True)
        self.AFInputFilesOne.setAutoExclusive(False)
        self.AFInputFilesOne.setObjectName("AFInputFilesOne")

        self.AFInputFilesTwo = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.AFInputFilesTwo.setGeometry(QtCore.QRect(840, 150, 178, 20))
        self.AFInputFilesTwo.setAutoExclusive(False)
        self.AFInputFilesTwo.setObjectName("AFInputFilesTwo")

        self.AFFileList = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.AFFileList.setGeometry(QtCore.QRect(730, 180, 241, 21))
        self.AFFileList.setObjectName("AFFileList")

        self.AFOutputLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.AFOutputLabel.setGeometry(QtCore.QRect(730, 250, 121, 16))
        self.AFOutputLabel.setObjectName("AFOutputLabel")
        
        self.AFOutputOne = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.AFOutputOne.setGeometry(QtCore.QRect(710, 280, 171, 20))
        self.AFOutputOne.setChecked(True)
        self.AFOutputOne.setAutoExclusive(False)
        self.AFOutputOne.setObjectName("AFOutputOne")

        self.AFOutputTwo = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.AFOutputTwo.setGeometry(QtCore.QRect(710, 300, 21, 20))
        self.AFOutputTwo.setText("")
        self.AFOutputTwo.setAutoExclusive(False)
        self.AFOutputTwo.setObjectName("AFOutputTwo")

        self.AFOutputEntryOne = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.AFOutputEntryOne.setGeometry(QtCore.QRect(870, 280, 113, 21))
        self.AFOutputEntryOne.setText("/")
        self.AFOutputEntryOne.setObjectName("AFOutputEntryOne")

        self.AFOutputEntryTwo = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.AFOutputEntryTwo.setGeometry(QtCore.QRect(730, 300, 113, 21))
        self.AFOutputEntryTwo.setText("")
        self.AFOutputEntryTwo.setObjectName("AFOutputEntryTwo")

        self.PerFileLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.PerFileLabel.setGeometry(QtCore.QRect(720, 370, 141, 20))
        self.PerFileLabel.setObjectName("PerFileLabel")

        self.PerFileInput = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.PerFileInput.setGeometry(QtCore.QRect(860, 370, 113, 21))
        self.PerFileInput.setObjectName("PerFileInput")

        self.RecyclesLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.RecyclesLabel.setGeometry(QtCore.QRect(720, 400, 141, 20))
        self.RecyclesLabel.setObjectName("RecyclesLabel")

        self.RecyclesInput = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.RecyclesInput.setGeometry(QtCore.QRect(860, 400, 113, 21))
        self.RecyclesInput.setObjectName("RecyclesInput")



        #  self.CloseButton.clicked.connect(self.closeGUI)
        self.RMButton.clicked.connect(self.runRM)
        self.AFButton.clicked.connect(self.runAF)



        self.RMInputButtonGroup = QtWidgets.QButtonGroup(parent=self.centralwidget)
        self.RMInputButtonGroup.setObjectName("RMInputButtonGroup")
        self.RMInputButtonGroup.addButton(self.RMInputOne)
        self.RMInputButtonGroup.addButton(self.RMInputTwo)

        self.AFInputButtonGroup = QtWidgets.QButtonGroup(parent=self.centralwidget)
        self.AFInputButtonGroup.setObjectName("AFInputButtonGroup")
        self.AFInputButtonGroup.addButton(self.AFInputOne)
        self.AFInputButtonGroup.addButton(self.AFInputTwo)
        self.AFInputButtonGroup.addButton(self.AFInputThree)

        self.RMInputFilesButtonGroup = QtWidgets.QButtonGroup(parent=self.centralwidget)
        self.RMInputFilesButtonGroup.setObjectName("RMInputFilesButtonGroup")
        self.RMInputFilesButtonGroup.addButton(self.RMInputFilesOne)
        self.RMInputFilesButtonGroup.addButton(self.RMInputFilesTwo)

        self.AFInputFilesButtonGroup = QtWidgets.QButtonGroup(parent=self.centralwidget)
        self.AFInputFilesButtonGroup.setObjectName("AFInputFilesButtonGroup")
        self.AFInputFilesButtonGroup.addButton(self.AFInputFilesOne)
        self.AFInputFilesButtonGroup.addButton(self.AFInputFilesTwo)

        self.RMOutputButtonGroup = QtWidgets.QButtonGroup(parent=self.centralwidget)
        self.RMOutputButtonGroup.setObjectName("RMOutputButtonGroup")
        self.RMOutputButtonGroup.addButton(self.RMOutputOne)
        self.RMOutputButtonGroup.addButton(self.RMOutputTwo)

        self.AFOutputButtonGroup = QtWidgets.QButtonGroup(parent=self.centralwidget)
        self.AFOutputButtonGroup.setObjectName("AFOutputButtonGroup")
        self.AFOutputButtonGroup.addButton(self.AFOutputOne)
        self.AFOutputButtonGroup.addButton(self.AFOutputTwo)

        self.PolyButtonGroup = QtWidgets.QButtonGroup(parent=self.centralwidget)
        self.PolyButtonGroup.setObjectName("PolyButtonGroup")
        self.PolyButtonGroup.addButton(self.DNAButtonOne)
        self.PolyButtonGroup.addButton(self.DNAButtonTwo)
        self.PolyButtonGroup.addButton(self.ProtButton)

        self.AlnInputButtonGroup = QtWidgets.QButtonGroup(parent=self.centralwidget)
        self.AlnInputButtonGroup.setObjectName("AlnInputButtonGroup")
        self.AlnInputButtonGroup.addButton(self.AlnInputOne)
        self.AlnInputButtonGroup.addButton(self.AlnInputTwo)


        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1045, 36))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.RMButton.setText(_translate("MainWindow", "Run shuffler"))
        self.AFButton.setText(_translate("MainWindow", "Run AlphaFold"))
             #   self.CloseButton.setText(_translate("MainWindow", "Close this GUI"))
        self.shuffleStatusLabel.setText(_translate("MainWindow", "Shuffle status here"))
        self.foldingStatusLabel.setText(_translate("MainWindow", "fold status here"))
        self.errorMessageLabel.setText(_translate("MainWindow", "Error message here"))

        self.RMInputLabel.setText(_translate("MainWindow", "Input folder path:"))
        self.RMInputOne.setText(_translate("MainWindow", "Same as this program"))
        self.RMInputFilesLabel.setText(_translate("MainWindow", "Input files:"))
        self.RMInputFilesOne.setText(_translate("MainWindow", "Entire folder"))
        self.RMInputFilesTwo.setText(_translate("MainWindow", "Listed file(s) (include extension)"))
        self.RMFileList.setText(_translate("MainWindow", "example, example, example"))
        self.WindowLabel.setText(_translate("MainWindow", "Window size"))
        self.WindowInput.setText(_translate("MainWindow", "200"))
        self.PerAlignLabel.setText(_translate("MainWindow", "Num shuffles to create:"))
        self.PerAlignInput.setText(_translate("MainWindow", "1000"))
        self.InDelCheck.setText(_translate("MainWindow", "Shuffle Insertions/Deletions"))
      #  self.TranslateLabel.setText(_translate("MainWindow", "DNA inputs will be shuffled BEFORE translating"))
        self.DNAButtonOne.setText(_translate("MainWindow", "DNA (T->S)"))
        self.DNAButtonTwo.setText(_translate("MainWindow", "DNA (S->T)"))
        self.ProtButton.setText(_translate("MainWindow", "Protein"))
        self.AlnInputOne.setText(_translate("MainWindow", "FASTA files only have 2 seqs"))
        self.AlnInputTwo.setText(_translate("MainWindow", "Select headers"))
        self.AlnEntryOne.setText(_translate("MainWindow", "Scer"))
        self.AlnEntryTwo.setText(_translate("MainWindow", "Sbay"))
        self.RMOutputLabel.setText(_translate("MainWindow", "Output folder path:"))
        self.RMOutputOne.setText(_translate("MainWindow", "Same as this program"))

        self.AFInputLabel.setText(_translate("MainWindow", "Input folder path:"))
        self.AFInputOne.setText(_translate("MainWindow", "Same as this program"))
        self.AFInputTwo.setText(_translate("MainWindow", "Same as shuffle output"))
        self.AFInputFilesLabel.setText(_translate("MainWindow", "Input files:"))
        self.AFInputFilesOne.setText(_translate("MainWindow", "Entire folder"))
        self.AFInputFilesTwo.setText(_translate("MainWindow", "Listed file(s) (include .txt)"))
        self.AFFileList.setText(_translate("MainWindow", "example, example, example"))
        self.AFOutputLabel.setText(_translate("MainWindow", "Output folder path:"))
        self.AFOutputOne.setText(_translate("MainWindow", "Same as this program"))
        self.PerFileLabel.setText(_translate("MainWindow", "Shuffles per file to run"))
        self.PerFileInput.setText(_translate("MainWindow", "5"))
        self.RecyclesLabel.setText(_translate("MainWindow", "Number of recycles:"))
        self.RecyclesInput.setText(_translate("MainWindow", "3"))
        

        #    def closeGUI(self):
 #       sys.exit(app.exec_())

        



    def runRM(self):
        self.errorMessageLabel.setHidden(True)

        # Get value for the number of shuffles per fasta
        shufflesPerAlign = self.PerAlignInput.text()
        if not shufflesPerAlign.isnumeric():
            self.errorMessageLabel.setText("Number of shuffles to create per file contains non int characters")
            self.errorMessageLabel.setHidden(False)
            return
        # Get value for window size to use for shuffling
        windowSize = self.WindowInput.text()
        if not windowSize.isnumeric():
            self.errorMessageLabel.setText("Window size contains non int characters")
            self.errorMessageLabel.setHidden(False)
            return
        # Get value for whether to shuffle InDels
        if self.InDelCheck.checkState():
            useInDels = "y"
        else:
            useInDels = "n"
        # Set flags for whether to translate based on input type
        if self.PolyButtonGroup.checkedId() == -2:
            translateFirst = True
            translateLast = False
        elif self.PolyButtonGroup.checkedId() == -3:
            translateFirst = False
            translateLast = True
        elif self.PolyButtonGroup.checkedId() == -4:
            translateFirst = False
            translateLast = False
        # Set the folder where the shuffle input files are located and return error if it doesn't exist
        if self.RMInputButtonGroup.checkedId() == -2:
            RMinputFolder = sys.path[0] + self.RMInputEntryOne.text()
        elif self.RMInputButtonGroup.checkedId() == -3:
            RMinputFolder = self.RMInputEntryTwo.text()
        
        if not os.path.exists(RMinputFolder):
            self.errorMessageLabel.setText("RM input folder does not exist")
            self.errorMessageLabel.setHidden(False)
            return
        # Set the output folder for the shuffles and create it if needed
        if self.RMOutputButtonGroup.checkedId() == -2:
            RMoutputFolder = sys.path[0] + self.RMOutputEntryOne.text()
        elif self.RMOutputButtonGroup.checkedId() == -3:
            RMoutputFolder = self.RMOutputEntryTwo.text()
        
        if not os.path.exists(RMoutputFolder):
            os.makedirs(RMoutputFolder)
        # Set the names of the two species to use for shuffling
        if self.AlnInputButtonGroup.checkedId() == -2:
            speciesOne = "NA"
            speciesTwo = "NA"
        elif self.AlnInputButtonGroup.checkedId() == -3:
            speciesOne = self.AlnEntryOne.text()
            speciesTwo = self.AlnEntryTwo.text()

        
        # If entire folder is selected, loop through all the files and run the shuffler for them
        if self.RMInputFilesButtonGroup.checkedId() == -2:
            for filename in os.listdir(RMinputFolder):
                fullInput = os.path.join(RMinputFolder, filename)
                fullOutput = os.path.join(RMoutputFolder, filename)

                if os.path.isdir(fullInput):
                    self.errorMessageLabel.setText("Input " + filename + " is a directory")
                    self.errorMessageLabel.setHidden(False)
                    return   
        
                if translateFirst:
                    # Call protein with y for last arg
                    os.system("perl newProteinShuffle.pl " + fullInput + " " + fullOutput + " " + speciesOne + " " + speciesTwo + " " + shufflesPerAlign + " " + windowSize + " " + useInDels + " y")

                    
                elif translateLast:
                    # Call DNA with y for last arg
                    os.system("perl newDNAShuffle.pl " + fullInput + " " + fullOutput + " " + speciesOne + " " + speciesTwo + " " + shufflesPerAlign + " " + windowSize + " " + useInDels + " y")

                else:
                    # Call protein with n for last arg
                    os.system("perl newProteinShuffle.pl " + fullInput + " " + fullOutput + " " + speciesOne + " " + speciesTwo + " " + shufflesPerAlign + " " + windowSize + " " + useInDels + " n")
            

                    



        # If only listed files are selected, run the shuffler for each of them
        elif self.RMInputFilesButtonGroup.checkedId() == -3:
            
            toSeperate = self.RMFileList.text()
            fileList = toSeperate.split(", ")

            for filename in fileList:
                fullInput = os.path.join(RMinputFolder, filename)
                fullOutput = os.path.join(RMoutputFolder, filename)
                if not os.path.exists(fullInput):
                    self.errorMessageLabel.setText("Input file " + filename + " does not exist")
                    self.errorMessageLabel.setHidden(False)
                    return

                if os.path.isdir(fullInput):
                    self.errorMessageLabel.setText("Input " + filename + " is a directory")
                    self.errorMessageLabel.setHidden(False)
                    return

                

                if translateFirst:
                    # Call protein with y for last arg
                    os.system("perl newProteinShuffle.pl " + fullInput + " " + fullOutput + " " + speciesOne + " " + speciesTwo + " " + shufflesPerAlign + " " + windowSize + " " + useInDels + " y")
                    
                elif translateLast:
                    # Call DNA with y for last arg
                    os.system("perl newDNAShuffle.pl " + fullInput + " " + fullOutput + " " + speciesOne + " " + speciesTwo + " " + shufflesPerAlign + " " + windowSize + " " + useInDels + " y")

                else:
                    # Call protein with n for last arg
                    os.system("perl newProteinShuffle.pl " + fullInput + " " + fullOutput + " " + speciesOne + " " + speciesTwo + " " + shufflesPerAlign + " " + windowSize + " " + useInDels + " n")
            i = i + 1
            
        
        
            

    

        





    def runAF(self): 
        self.errorMessageLabel.setHidden(True)
        # Set the number of shuffles to fold per shuffle file
        shufflesPerFile = self.PerFileInput.text()
        if not shufflesPerFile.isnumeric():
            self.errorMessageLabel.setText("Number of shuffles per file to run contains non int characters.")
            self.errorMessageLabel.setHidden(False)
            return
        shufflesPerFile = int(shufflesPerFile)
        # Set the number of recycles to make for each fold
        recycleNum = self.RecyclesInput.text()
        if not recycleNum.isnumeric():
            self.errorMessageLabel.setText("Number of recycles contains non int characters.")
            self.errorMessageLabel.setHidden(False)
            return
       # Set the input folder for AlphaFold and return an error if it doesn't exist
        if self.AFInputButtonGroup.checkedId() == -2:
            AFinputFolder = sys.path[0] + self.AFInputEntryOne.text()
        elif self.AFInputButtonGroup.checkedId() == -3:
            if self.RMOutputButtonGroup.checkedId() == -2:
                AFinputFolder = sys.path[0] + self.RMOutputEntryOne.text()
            elif self.RMOutputButtonGroup.checkedId() == -3:
                AFinputFolder = self.RMOutputEntryTwo.text()
        elif self.AFInputButtonGroup.checkedId() == -4:
            AFinputFolder = self.AFInputEntryTwo.text()
        if not os.path.exists(AFinputFolder):
            self.errorMessageLabel.setText("AlphaFold input folder does not exist")
            self.errorMessageLabel.setHidden(False)
            return
        # Set the output folder for AlphaFold and make it if needed
        if self.AFOutputButtonGroup.checkedId() == -2:
            AFoutputFolder = sys.path[0] + self.AFOutputEntryOne.text()
        elif self.AFOutputButtonGroup.checkedId() == -3:
            AFoutputFolder = self.AFOutputEntryTwo.text()
        if not os.path.exists(AFoutputFolder):
            os.makedirs(AFoutputFolder)

       
        # If entire folder is selected, loop through all the files
        if self.AFInputFilesButtonGroup.checkedId() == -2:
            for filename in os.listdir(AFinputFolder):
                fullInput = os.path.join(AFinputFolder, filename)
                fileOutputFolder = os.path.join(AFoutputFolder, filename)
                # Return an error if theirs a directory
                if os.path.isdir(fullInput):
                    self.errorMessageLabel.setText("Input " + filename + " is a directory")
                    self.errorMessageLabel.setHidden(False)
                    return
                # Make folder for all the outputs from a specific file of shuffles
                if not os.path.exists(fileOutputFolder):
                    os.makedirs(fileOutputFolder)

                # Extract correct number of shuffles to shuffleList
                shuffleList = []
                fileReading = open(fullInput, "r")
                for i in range(7):
                    trash = fileReading.readline()
                for i in range(shufflesPerFile):
                    trash = fileReading.readline()
                    lineToAdd = fileReading.readline()
                    lineToAdd = lineToAdd.strip()
                    if lineToAdd == "":
                        self.errorMessageLabel.setText("Shuffle file " + filename + " does not contain enough shuffles")
                        self.errorMessageLabel.setHidden(False)
                        return
                    shuffleList.append(lineToAdd)
                fileReading.close()

                # Loop through all the shuffles for a file and run them
                i = 0
                for sequence in shuffleList:
                    finalFolderName = "ShuffleNumber" + str(i)
                    fullOutput = os.path.join(fileOutputFolder, finalFolderName)
                    if not os.path.exists(fullOutput):
                        os.makedirs(fullOutput)
                    
                    tempFilePath = os.path.join(sys.path[0], "temporaryInput.fasta")
                    tempHeader = filename + str(i)
                    fileToWrite = open(tempFilePath, "w")
                    fileToWrite.write(">" + tempHeader + '\n')
                    fileToWrite.write(sequence)
                    fileToWrite.close()

                    AFcommand = "colabfold_batch --amber --templates --num-recycle " + self.RecyclesInput.text() + " " + tempFilePath + " " + fullOutput
                   # print (AFcommand)
                    os.system(AFcommand)
                    os.remove(tempFilePath)
                    i = i + 1



        # If only listed files are selected, run them
        elif self.AFInputFilesButtonGroup.checkedId() == -3:
            
            toSeperate = self.AFFileList.text()
            fileList = toSeperate.split(", ")
            
            # Return an error if a filename is nonexistent or a directory
            for filename in fileList:
                fullInput = os.path.join(AFinputFolder, filename)
                fileOutputFolder = os.path.join(AFoutputFolder, filename)
                if not os.path.exists(fullInput):
                    self.errorMessageLabel.setText("Input file " + filename + " does not exist")
                    self.errorMessageLabel.setHidden(False)
                    return

                if os.path.isdir(fullInput):
                    self.errorMessageLabel.setText("Input " + filename + " is a directory")
                    self.errorMessageLabel.setHidden(False)
                    return
                # Make folder for all the outputs from a specific file of shuffles
                if not os.path.exists(fileOutputFolder):
                    os.makedirs(fileOutputFolder)



                # Extract correct number of shuffles to shuffleList
                shuffleList = []
                fileReading = open(fullInput, "r")
                for i in range(7):
                    trash = fileReading.readline()
                for i in range(shufflesPerFile):
                    trash = fileReading.readline()
                    lineToAdd = fileReading.readline()
                    lineToAdd = lineToAdd.strip()
                    if lineToAdd == "":
                        self.errorMessageLabel.setText("Shuffle file " + filename + " does not contain enough shuffles")
                        self.errorMessageLabel.setHidden(False)
                        return
                    shuffleList.append(lineToAdd)
                fileReading.close()

                
                # Loop through all the shuffles in a file and run them
                i = 0
                for sequence in shuffleList:
                    finalFolderName = "ShuffleNumber" + str(i)
                    fullOutput = os.path.join(fileOutputFolder, finalFolderName)
                    if not os.path.exists(fullOutput):
                        os.makedirs(fullOutput)
                    
                    tempFilePath = os.path.join(sys.path[0], "temporaryInput.fasta")
                    tempHeader = filename + str(i)
                    fileToWrite = open(tempFilePath, "w")
                    fileToWrite.write(">" + tempHeader + '\n')
                    fileToWrite.write(sequence)
                    fileToWrite.close()
                    
                    AFcommand = "colabfold_batch --amber --templates --num-recycle " + self.RecyclesInput.text() + " " + tempFilePath + " " + fullOutput
                    
                    os.system(AFcommand)
                    os.remove(tempFilePath)

        
                    

      
   



        

if __name__ == "__main__":
    import sys
    import os
    import fileinput
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())



